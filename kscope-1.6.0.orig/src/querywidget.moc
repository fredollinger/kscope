/****************************************************************************
** QueryWidget meta object code from reading C++ file 'querywidget.h'
**
** Created: Thu Sep 9 13:22:44 2010
**      by: The Qt MOC ($Id: qt/moc_yacc.cpp   3.3.8   edited Feb 2 14:59 $)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "querywidget.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.8b. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *QueryWidget::className() const
{
    return "QueryWidget";
}

QMetaObject *QueryWidget::metaObj = 0;
static QMetaObjectCleanUp cleanUp_QueryWidget( "QueryWidget", &QueryWidget::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString QueryWidget::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QueryWidget", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString QueryWidget::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "QueryWidget", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* QueryWidget::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QueryWidgetLayout::staticMetaObject();
    static const QUMethod slot_0 = {"slotNewQueryPage", 0, 0 };
    static const QUParameter param_slot_1[] = {
	{ 0, &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod slot_1 = {"slotLockCurrent", 1, param_slot_1 };
    static const QUMethod slot_2 = {"slotLockCurrent", 0, 0 };
    static const QUMethod slot_3 = {"slotRefreshCurrent", 0, 0 };
    static const QUMethod slot_4 = {"slotNextResult", 0, 0 };
    static const QUMethod slot_5 = {"slotPrevResult", 0, 0 };
    static const QUMethod slot_6 = {"slotCloseCurrent", 0, 0 };
    static const QUMethod slot_7 = {"slotCloseAll", 0, 0 };
    static const QUMethod slot_8 = {"slotHistoryPrev", 0, 0 };
    static const QUMethod slot_9 = {"slotHistoryNext", 0, 0 };
    static const QUParameter param_slot_10[] = {
	{ 0, &static_QUType_QString, 0, QUParameter::In },
	{ 0, &static_QUType_varptr, "\x11", QUParameter::In }
    };
    static const QUMethod slot_10 = {"slotRequestLine", 2, param_slot_10 };
    static const QUParameter param_slot_11[] = {
	{ 0, &static_QUType_ptr, "QWidget", QUParameter::In }
    };
    static const QUMethod slot_11 = {"slotCurrentChanged", 1, param_slot_11 };
    static const QUParameter param_slot_12[] = {
	{ 0, &static_QUType_ptr, "QWidget", QUParameter::In }
    };
    static const QUMethod slot_12 = {"slotClosePage", 1, param_slot_12 };
    static const QUParameter param_slot_13[] = {
	{ 0, &static_QUType_varptr, "\x0e", QUParameter::In }
    };
    static const QUMethod slot_13 = {"slotContextMenu", 1, param_slot_13 };
    static const QUParameter param_slot_14[] = {
	{ 0, &static_QUType_ptr, "QWidget", QUParameter::In },
	{ 0, &static_QUType_varptr, "\x0e", QUParameter::In }
    };
    static const QUMethod slot_14 = {"slotContextMenu", 2, param_slot_14 };
    static const QMetaData slot_tbl[] = {
	{ "slotNewQueryPage()", &slot_0, QMetaData::Public },
	{ "slotLockCurrent(bool)", &slot_1, QMetaData::Public },
	{ "slotLockCurrent()", &slot_2, QMetaData::Public },
	{ "slotRefreshCurrent()", &slot_3, QMetaData::Public },
	{ "slotNextResult()", &slot_4, QMetaData::Public },
	{ "slotPrevResult()", &slot_5, QMetaData::Public },
	{ "slotCloseCurrent()", &slot_6, QMetaData::Public },
	{ "slotCloseAll()", &slot_7, QMetaData::Public },
	{ "slotHistoryPrev()", &slot_8, QMetaData::Public },
	{ "slotHistoryNext()", &slot_9, QMetaData::Public },
	{ "slotRequestLine(const QString&,uint)", &slot_10, QMetaData::Private },
	{ "slotCurrentChanged(QWidget*)", &slot_11, QMetaData::Private },
	{ "slotClosePage(QWidget*)", &slot_12, QMetaData::Private },
	{ "slotContextMenu(const QPoint&)", &slot_13, QMetaData::Private },
	{ "slotContextMenu(QWidget*,const QPoint&)", &slot_14, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ "sPath", &static_QUType_QString, 0, QUParameter::In },
	{ "nLine", &static_QUType_varptr, "\x11", QUParameter::In }
    };
    static const QUMethod signal_0 = {"lineRequested", 2, param_signal_0 };
    static const QUMethod signal_1 = {"newQuery", 0, 0 };
    static const QMetaData signal_tbl[] = {
	{ "lineRequested(const QString&,uint)", &signal_0, QMetaData::Public },
	{ "newQuery()", &signal_1, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"QueryWidget", parentObject,
	slot_tbl, 15,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_QueryWidget.setMetaObject( metaObj );
    return metaObj;
}

void* QueryWidget::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "QueryWidget" ) )
	return this;
    return QueryWidgetLayout::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL lineRequested
void QueryWidget::lineRequested( const QString& t0, uint t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_QString.set(o+1,t0);
    static_QUType_varptr.set(o+2,&t1);
    activate_signal( clist, o );
}

// SIGNAL newQuery
void QueryWidget::newQuery()
{
    activate_signal( staticMetaObject()->signalOffset() + 1 );
}

bool QueryWidget::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: slotNewQueryPage(); break;
    case 1: slotLockCurrent((bool)static_QUType_bool.get(_o+1)); break;
    case 2: slotLockCurrent(); break;
    case 3: slotRefreshCurrent(); break;
    case 4: slotNextResult(); break;
    case 5: slotPrevResult(); break;
    case 6: slotCloseCurrent(); break;
    case 7: slotCloseAll(); break;
    case 8: slotHistoryPrev(); break;
    case 9: slotHistoryNext(); break;
    case 10: slotRequestLine((const QString&)static_QUType_QString.get(_o+1),(uint)(*((uint*)static_QUType_ptr.get(_o+2)))); break;
    case 11: slotCurrentChanged((QWidget*)static_QUType_ptr.get(_o+1)); break;
    case 12: slotClosePage((QWidget*)static_QUType_ptr.get(_o+1)); break;
    case 13: slotContextMenu((const QPoint&)*((const QPoint*)static_QUType_ptr.get(_o+1))); break;
    case 14: slotContextMenu((QWidget*)static_QUType_ptr.get(_o+1),(const QPoint&)*((const QPoint*)static_QUType_ptr.get(_o+2))); break;
    default:
	return QueryWidgetLayout::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool QueryWidget::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: lineRequested((const QString&)static_QUType_QString.get(_o+1),(uint)(*((uint*)static_QUType_ptr.get(_o+2)))); break;
    case 1: newQuery(); break;
    default:
	return QueryWidgetLayout::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool QueryWidget::qt_property( int id, int f, QVariant* v)
{
    return QueryWidgetLayout::qt_property( id, f, v);
}

bool QueryWidget::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
